trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: project
    displayName: 'Project Name'
    type: string
    default: 'MeraStore.Shared.Kernel.Common.Core'
    values:
      - MeraStore.Shared.Kernel.Common.Core
      - MeraStore.Shared.Kernel.Common.Exceptions
      - MeraStore.Shared.Kernel.Caching
      - MeraStore.Shared.Kernel.Common.Http
      - MeraStore.Shared.Kernel.Logging
      - MeraStore.Shared.Kernel.Common.WebApi
      - MeraStore.Shared.Kernel.Context
      - MeraStore.Shared.Kernel.Persistence

  - name: versionType
    displayName: 'Version Type'
    type: string
    default: 'Build'
    values:
      - New
      - Major
      - Minor
      - Build
      - Pre-Release

  - name: buildOrPublish
    displayName: 'Build or Publish'
    type: string
    default: 'Build'
    values:
      - Build
      - Publish

variables:
- group: nuget-pipeline-secrets

# Define other variables separately
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'

jobs:
  # Build and Test job
  - job: BuildAndTest
    displayName: Restore and Build Project
    condition: eq('${{ parameters.buildOrPublish }}', 'Build')
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET 9 SDK'
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
        
      - task: DotNetCoreCLI@2
        displayName: DotNet Restore
        inputs:
          command: 'restore'
          projects: '**/${{ parameters.project }}.csproj'
          feedsToUse: 'select'
          vstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'
      
      - task: DotNetCoreCLI@2
        displayName: DotNet Build
        inputs:
          command: 'build'
          projects: '**/${{ parameters.project }}.csproj'
          arguments: '--configuration $(buildConfiguration)'

  # Create NuGet Package job
  - job: CreateNugetPackage
    displayName: Create NuGet Package
    condition: and(ne('${{ parameters.versionType }}', 'None'), eq('${{ parameters.buildOrPublish }}', 'Publish'))
    variables:
      packageVersion: '' # Placeholder for the calculated version
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET 9 SDK'
        inputs:
          packageType: 'sdk'
          version: '9.0.x'
          
      - task: DotNetCoreCLI@2
        displayName: DotNet Restore
        inputs:
          command: 'restore'
          projects: '**/${{ parameters.project }}.csproj'
          feedsToUse: 'select'
          vstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'

      - script: |
          #!/bin/bash
          
          echo "Starting version calculation..."
          echo "Using the secret: $(System.AccessToken)"
          
          # Get version type from parameters
          versionType="${{ parameters.versionType }}"
          projectName="${{ parameters.project }}"
          
          echo "Version type selected: $versionType"
          echo "Project selected: $projectName"

          # Define package ID mapping as a Bash associative array
          declare -A packageIdMap=(
          ["MeraStore.Shared.Kernel.Common.Core"]="980c11e2-e72b-4f15-8c92-57d72efc9c99"
          ["MeraStore.Shared.Kernel.Common.Exceptions"]="e518e14e-e45c-4be2-ac37-fec0f79b0228"
          ["MeraStore.Shared.Kernel.Caching"]="23b33e91-2af0-47f3-8121-5130a8ec85d5"
          ["MeraStore.Shared.Kernel.Common.Http"]="71e4ee16-fb01-4983-9b8f-c4cfdd9ddc78"
          ["MeraStore.Shared.Kernel.Logging"]="e3c49b65-9868-41ba-8d23-e0071b46bf13"
          ["MeraStore.Shared.Kernel.Common.WebApi"]="847345e2-2a60-46cf-b576-e9a66ce1bd4c"
          ["MeraStore.Shared.Kernel.Context"]="f0823a5b-bc23-4fd1-83ef-08c8afff00e7"
          ["MeraStore.Shared.Kernel.Persistence"]="564be5e3-a626-47d8-9951-6f68f4fe8cb3"
          )
          
          # Get package ID for the selected project
          packageId="${packageIdMap[$projectName]}"
          
          if [[ -z "$packageId" ]]; then
              echo "Error: Package ID for project '$projectName' not found."
              exit 1
          fi
          
          # Fetch the latest version from NuGet feed using the package ID if versionType is not 'New'
          if [[ "$versionType" != "New" ]]; then
              nugetSource="https://feeds.dev.azure.com/merastore/d3584f81-ddd5-413c-9dcc-8cf171921ad6/_apis/Packaging/Feeds/7548fa1b-58c8-45f0-9f9c-9a94233b60d3/Packages/$packageId"
              response=$(curl -s -H "Authorization: Basic $AZURE_PATH" "$nugetSource")
              latestVersion=$(echo "$response" | jq -r '.versions[] | select(.isLatest==true) | .version')
              
              # Default to 1.0.0 if no latest version is found
              if [[ -z "$latestVersion" ]]; then
                  latestVersion="1.0.0"
              fi
          else
              latestVersion="1.0.0"
          fi
          
          # Split the version into parts
          IFS='.' read -r majorVersion minorVersion buildNumber <<< "$latestVersion"
          
          preReleaseTag=""
          timestamp=$(date +%Y%m%d%H%M%S)

          # Determine version based on selected version type
          case "$versionType" in
              Major)
                  ((majorVersion++))
                  minorVersion=0
                  buildNumber=0
                  ;;
              Minor)
                  ((minorVersion++))
                  buildNumber=0
                  ;;
              Build)
                  ((buildNumber++))
                  ;;
              Pre-Release)
                  ((buildNumber++))
                  preReleaseTag="-beta-$timestamp"
                  ;;
          esac

          # Construct the version string
          version="$majorVersion.$minorVersion.$buildNumber$preReleaseTag"
          echo "Final calculated version: $version"
          
          # Set the calculated version as a pipeline variable
          echo "##vso[task.setvariable variable=packageVersion]$version"
          echo "Version calculation completed."
          
          # Set the calculated version as a pipeline name
          echo "##vso[build.updatebuildnumber]$projectName-$version"
        displayName: 'Calculate Version Number'

      - task: DotNetCoreCLI@2
        displayName: DotNet Pack
        inputs:
          command: 'pack'
          packagesToPack: '**/${{ parameters.project }}.csproj'
          arguments: '--configuration $(buildConfiguration) /p:PackageVersion=$(packageVersion)'

      - task: DotNetCoreCLI@2
        displayName: DotNet Push
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          TargetPath: '\\${{ parameters.project }}\$(Build.DefinitionName)\$(Build.BuildNumber)'
          publishLocation: 'Container'

      - task: GitHubComment@0
        displayName: Comment
        inputs:
          gitHubConnection: 'GitHub - sanjyotagureddy'
          repositoryName: '$(Build.Repository.Name)'
          comment: 'Nuget: $(versionType), version: $(packageVersion) created'
